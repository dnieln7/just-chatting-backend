// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: chats.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createChat = `-- name: CreateChat :one
INSERT INTO tb_chats (
        id,
        participants,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4)
RETURNING id, participants, created_at, updated_at
`

type CreateChatParams struct {
	ID           uuid.UUID
	Participants []uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (TbChat, error) {
	row := q.db.QueryRowContext(ctx, createChat,
		arg.ID,
		pq.Array(arg.Participants),
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i TbChat
	err := row.Scan(
		&i.ID,
		pq.Array(&i.Participants),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatById = `-- name: GetChatById :one
SELECT id, participants, created_at, updated_at FROM tb_chats WHERE id = $1
`

func (q *Queries) GetChatById(ctx context.Context, id uuid.UUID) (TbChat, error) {
	row := q.db.QueryRowContext(ctx, getChatById, id)
	var i TbChat
	err := row.Scan(
		&i.ID,
		pq.Array(&i.Participants),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatWithParticipants = `-- name: GetChatWithParticipants :one
SELECT id, participants, created_at, updated_at FROM tb_chats WHERE participants @> $1 LIMIT 1
`

func (q *Queries) GetChatWithParticipants(ctx context.Context, participants []uuid.UUID) (TbChat, error) {
	row := q.db.QueryRowContext(ctx, getChatWithParticipants, pq.Array(participants))
	var i TbChat
	err := row.Scan(
		&i.ID,
		pq.Array(&i.Participants),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatsByParticipantId = `-- name: GetChatsByParticipantId :many
SELECT id, participants, created_at, updated_at FROM tb_chats WHERE participants @> $1
`

func (q *Queries) GetChatsByParticipantId(ctx context.Context, participants []uuid.UUID) ([]TbChat, error) {
	rows, err := q.db.QueryContext(ctx, getChatsByParticipantId, pq.Array(participants))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbChat
	for rows.Next() {
		var i TbChat
		if err := rows.Scan(
			&i.ID,
			pq.Array(&i.Participants),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
